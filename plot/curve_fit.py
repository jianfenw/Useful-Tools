import matplotlib.pyplot as plt
import numpy as np
import copy

def lineplot_2(x1_data, y1_data, x2_data, y2_data, x_label="", y_label="", title=""):
	# Create the plot object 
	_, ax = plt.subplots()
	# Plot the best fit line, set the linewidth (lw), color and transparency (alpha) of the line 
	ax.plot(x1_data, y1_data, lw = 1.5, color = 'b', alpha = 1)
	ax.plot(x2_data, y2_data, lw = 1.5, color = 'r', alpha = 1)
	# Label the axes and provide a title 
	ax.set_title(title) 
	ax.set_xlabel(x_label)
	ax.set_ylabel(y_label)
	plt.grid(True) 


def lineplot(x_data, y_data, x_label="", y_label="", title=""):
	# Create the plot object 
	_, ax = plt.subplots()
	# Plot the best fit line, set the linewidth (lw), color and transparency (alpha) of the line 
	ax.plot(x_data, y_data, lw = 1.5, color = 'b', alpha = 1)
	# Label the axes and provide a title 
	ax.set_title(title) 
	ax.set_xlabel(x_label) 
	ax.set_ylabel(y_label)
	plt.grid(True) 


def scatterplot(x_data, y_data, x_label="", y_label="", title="", color = "b", yscale_log=False):
	# Create the plot object 
	_, ax = plt.subplots()
	# Plot the data, set the size (s), color and transparency (alpha)
	ax.scatter(x_data, y_data, s = 10, marker='x', color = color, alpha = 0.75)
	if yscale_log == True:
		ax.set_yscale('log')
	ax.set_title(title) 
	ax.set_xlabel(x_label) 
	ax.set_ylabel(y_label)
	plt.grid(True) 

def scatter_curve_plot(x_data, y_data, x_label="", y_label="", title="", color="b", yscale_log=False):
	# Create the plot object 
	_, ax = plt.subplots()
	# Plot the data, set the size (s), color and transparency (alpha)
	ax.scatter(x_data, y_data, s = 10, marker='x', color = color, alpha = 0.75)
	ax.plot(x_data, y_data, lw = 1.0, color = 'b', alpha = 1)
	if yscale_log == True:
		ax.set_yscale('log')
	ax.set_title(title) 
	ax.set_xlabel(x_label) 
	ax.set_ylabel(y_label)
	plt.grid(True) 


def bar_plot(x_data, y_data, n_chains=4, n_algorithms=7, x_label='', y_label='', chain_name = [], algorithm_name=[], title='', grid_flag=False, y_scale=100):
	# create the plot object
	_, ax = plt.subplots()
	colors = ['b', 'r', 'g', 'm', 'c', 'y', 'grey']
	# plot the data
	n_groups = n_chains
	n_algorithms = n_algorithms
	bar_width = 0.2
	index = np.arange(n_groups)
	bar_legend = []
	for i in range(n_algorithms):
		tmp_bar = ax.bar(index + bar_width/2*i, y_data[i], bar_width/2, color=colors[i], label=algorithm_name[i])
		bar_legend.append(tmp_bar)
	ax.set_title(title) 
	ax.legend(bar_legend, algorithm_name)
	plt.xticks(index -0.2 + 2*bar_width, chain_name)
	ax.set_xlabel(x_label) 
	ax.set_ylabel(y_label)
	plt.ylim(0, y_scale*1.1)
	plt.grid(grid_flag)
	return


'''
x=[(10+20*i) for i in range(13)] + [350, 450, 650, 850, 1000]
bess_y=[25754.6, 25952.7, 20909.3, 21213.9, 19326.4, 15798.2, 15737.9, 14733.4, 13810.8, 12943.1, 12232.3, 11469.0, 10335.8, 8665.6, 7174.9, 5343.8, 4170.2, 3620.6]
p4_y = [99965.5, 99954.7, 99954.2, 99956.9, 99963.1, 99963.4, 99958.4, 99955.6, 99963.1, 99959.7, 99957.9, 99961.4, 99963.8, 99960.3, 99964.1, 99958.0, 99964.9, 99963.1]
x1_label = '# of table entries'
y1_label = 'Throughput (Mbps)'
fig1_title = 'BESS Throughput Decreases As Number of Table Entries Increases'
lineplot_2(x,bess_y, x,p4_y, x1_label, y1_label, title=fig1_title)
plt.figure(1)



x1=[1,2,3,4,5,6,7]
y1=[12511.4, 7483.9, 5353.7, 4157.5, 3339.1, 2825.8, 2480.8]
x2=[1,2,3,4,5]
y2=[99959.5, 99960.0, 99958.6, 99956.6, 99956.4]
x2_label = '# of ACL modules'
y2_label = 'End-to-end Throughput (Mbps)'
fig2_title = 'Throughput: P4 NF Chain v.s. BESS NF Chain\n(200 Table Entries)'
lineplot_2(x1,y1,x2,y2, x2_label, y2_label, fig2_title)
plt.figure(2)
'''

'''
acl_x = [1, 10, 20, 21, 22, 23, 25, 30, 50, 70, 90, 110, 130, 150, 200, 250, 350, 700]
acl_y = [99.863, 190.390, 217.958, 224.159, 289.346, 332.360, 348.555, 361.306, 407.123, 455.393, 506.997, 591.972, 643.399, 696.194, 828.297, 959.281, 1223.477, 2141.982]
scatter_curve_plot(acl_x, acl_y, '', '', 'Profile ACL: # of cycles ~ # of entries', 'r')
plt.figure(1)
'''

'''
chain_res = [[0.833, 0.084, 0.833, 0.02, 0.833], \
	[0.833, 0.028, 0.833, 0.02, 0.833], \
	[0.833, 0.028, 0.833, 0.02, 0.833], \
	[0.832, 0.028, 0.833, 0.02, 0.833], \
	[0.833, 0.028, 0.833, 0.02, 0.833], \
	[0.833, 0.028, 0.833, 0.02, 0.833], \
	[0.833, 0.028, 0.833, 0.02, 0.833]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 100
	for i in range(n_algorithms):
		base_val = min(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'No Profiling', 'Individual', 'No Core Op', 'E2', 'All P4', 'All BESS']
chain_name = ['chain 0', 'chain 1', 'chain 2', 'chain 3', 'chain 4']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on Chain [0, 1, 2, 3, 4]', False)
plt.figure(1)

# chain 0, 2, 3, 4
chain_res = [[0.833, 0.833, 0.099, 0.833], \
	[0.833, 0.833, 0.02, 0.833], \
	[0.833, 0.833, 0.06, 0.833], \
	[0.833, 0.833, 0.02, 0.833], \
	[0.833, 0.833, 0.02, 0.833], \
	[0.833, 0.833, 0.02, 0.833]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 100
	for i in range(n_algorithms):
		base_val = min(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'No Profiling', 'Individual', 'No Core Op', 'E2', 'All P4', 'All BESS']
chain_name = ['chain 0', 'chain 2', 'chain 3', 'chain 4']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on Chain [0, 2, 3, 4]', False)
plt.figure(2)

# chain 0, 1, 3, 4
chain_res = [[0.833, 0.14, 0.02, 0.833], \
	[0.833, 0.028, 0.02, 0.833], \
	[0.833, 0.084, 0.02, 0.833], \
	[0.833, 0.028, 0.02, 0.833], \
	[0.833, 0.028, 0.02, 0.833], \
	[0.833, 0.028, 0.02, 0.833]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 100
	for i in range(n_algorithms):
		base_val = min(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'No Profiling', 'Individual', 'No Core Op', 'E2', 'All P4', 'All BESS']
chain_name = ['chain 0', 'chain 1', 'chain 3', 'chain 4']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on Chain [0, 1, 3, 4]', False)
plt.figure(3)


# chain 0, 1, 2, 4
chain_res = [[0.833, 0.14, 0.831, 0.833], \
	[0.833, 0.028, 0.833, 0.833], \
	[0.833, 0.084, 0.833, 0.833], \
	[0.833, 0.028, 0.833, 0.833], \
	[0.833, 0.028, 0.828, 0.833], \
	[0.833, 0.028, 0.833, 0.833]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 100
	for i in range(n_algorithms):
		base_val = min(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'No Profiling', 'Individual', 'No Core Op', 'E2', 'All P4', 'All BESS']
chain_name = ['chain 0', 'chain 1', 'chain 2', 'chain 4']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on Chain [0, 1, 2, 4]', False)
plt.figure(4)

# chain 0, 1, 2, 4
chain_res = [[0.833, 0.084, 0.833, 0.02], \
	[0.833, 0.028, 0.833, 0.02], \
	[0.833, 0.084, 0.833, 0.02], \
	[0.833, 0.028, 0.833, 0.02], \
	[0.833, 0.028, 0.833, 0.02], \
	[0.833, 0.028, 0.833, 0.02]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 100
	for i in range(n_algorithms):
		base_val = min(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'No Profiling', 'Individual', 'No Core Op', 'E2', 'All P4', 'All BESS']
chain_name = ['chain 0', 'chain 1', 'chain 2', 'chain 3']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on Chain [0, 1, 2, 3]', False)
plt.figure(5)

'''

'''
# chain 1, 2, 3, 4
chain_res = [[0.14, 0.833, 0.02, 0.833], \
	[0.084, 0.833, 0.02, 0.833], \
	[0.028, 0.833, 0.02, 0.833], \
	[0.028, 0.832, 0.02, 0.833], \
	[0.028, 0.833, 0.02, 0.833], \
	[0.028, 0.833, 0.02, 0.833], \
	[0.084, 0.833, 0.02, 0.833]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 0
	for i in range(n_algorithms):
		base_val = max(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'No Profiling', 'Individual', 'No Core Op', 'Minimizing Bounces', 'All P4', 'All BESS']
chain_name = ['chain 1', 'chain 2', 'chain 3', 'chain 4']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on Chain [1, 2, 3, 4]', False, 160)
plt.figure(1)
'''

'''
# chain 4, 4, 4
chain_res = [[100, 100, 100], \
	[21.992187, 21.94437, 100]]
n_algorithms = len(chain_res)
n_chains = len(chain_res[0])
for j in range(n_chains):
	base_val = 0
	for i in range(n_algorithms):
		base_val = max(base_val, chain_res[i][j])
	for i in range(n_algorithms):
		chain_res[i][j] = chain_res[i][j] / base_val * 100
algorithm_name = ['NFCP', 'W/O Optimization']
chain_name = ['chain 4 (1)', 'chain 4 (2)', 'chain 4 (3)']
bar_plot([], chain_res, n_chains, n_algorithms, 'NF chain index number', 'Throughput (%)', chain_name, algorithm_name, 'Experiment on 3x chain 4', False, 110)
plt.figure(1)
'''

'''
#test_throughput_list = [float(i)*10**9 for i in range(1,1001)]
#res_cores = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 108, 108, 108, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 113, 113, 113, 114, 114, 115, 115, 116, 116, 116, 117, 117, 118, 118, 118, 119, 119, 120, 120, 120, 121, 121, 122, 122, 123, 123, 123, 124, 124, 125, 125, 126, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 170, 170, 171, 171, 172, 172, 173, 174, 174, 175, 175, 176, 176, 177, 178, 178, 179, 179, 180, 181, 181, 182, 182, 183, 184, 184, 185, 185, 186, 187, 187, 188, 189, 189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 204, 204, 205, 206, 206, 207, 208, 208, 209, 210, 211, 211, 212, 213, 213, 214, 215, 215, 216, 217, 218, 218, 219, 220, 221, 221, 222, 223, 224, 224, 225, 226, 227, 227, 228, 229, 230, 230, 231, 232, 233, 234, 234, 235, 236, 237, 238, 238, 239, 240, 241, 242, 242, 243, 244, 245, 246, 247, 247, 248, 249, 250, 251, 252, 253, 253, 254, 255, 256, 257, 258, 259, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 375, 376, 378, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 408, 409, 411, 412, 414, 415, 417, 419, 420, 422, 424, 425, 427, 429, 430, 432, 434, 436, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 499, 501, 503, 505, 507, 509, 511, 514, 516, 518, 520, 523, 525, 527, 529, 532, 534, 536, 539, 541, 543, 546, 548, 551, 553, 555, 558, 560, 563, 565, 568, 571, 573, 576, 578, 581, 584, 586, 589, 592, 594, 597, 600, 603, 606, 608, 611, 614, 617, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 660, 663, 666, 669, 673, 676, 679, 683, 686, 690, 693, 696, 700, 703, 707, 711, 714, 718, 722, 725, 729, 733, 737, 740, 744, 748, 752, 756, 760, 764, 768, 772, 777, 781, 785, 789, 793, 798, 802, 807, 811, 815, 820, 825, 829, 834, 839, 843, 848, 853, 858, 863, 868, 873, 878, 883, 888, 893, 898, 904, 909, 915, 920, 925]
#res_cores = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 108, 108, 108, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 113, 113, 113, 114, 114, 115, 115, 116, 116, 116, 117, 117, 118, 118, 118, 119, 119, 120, 120, 120, 121, 121, 122, 122, 123, 123, 123, 124, 124, 125, 125, 126, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 170, 170, 171, 171, 172, 172, 173, 174, 174, 175, 175, 176, 176, 177, 178, 178, 179, 179, 180, 181, 181, 182, 182, 183, 184, 184, 185, 185, 186, 187, 187, 188, 189, 189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 204, 204, 205, 206, 206, 207, 208, 208, 209, 210, 211, 211, 212, 213, 213, 214, 215, 215, 216, 217, 218, 218, 219, 220, 221, 221, 222, 223, 224, 224, 225, 226, 227, 227, 228, 229, 230, 230, 231, 232, 233, 234, 234, 235, 236, 237, 238, 238, 239, 240, 241, 242, 242, 243, 244, 245, 246, 247, 247, 248, 249, 250, 251, 252, 253, 253, 254, 255, 256, 257, 258, 259, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 375, 376, 378, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 401, 403, 404, 406, 408, 409, 411, 412, 414, 415, 417, 419, 420, 422, 424, 425, 427, 429, 430, 432, 434, 436, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 499, 501, 503, 505, 507, 509, 511, 514, 516, 518, 520, 523, 525, 527, 529, 532, 534, 536, 539, 541, 543, 546, 548, 551, 553, 555, 558, 560, 563, 565, 568, 571, 573, 576, 578, 581, 584, 586, 589, 592, 594, 597, 600, 603, 606, 608, 611, 614, 617, 620, 623, 626, 629, 632, 635, 638, 641, 644, 647, 650, 653, 656, 660, 663, 666, 669, 673, 676, 679, 683, 686, 690, 693, 696, 700, 703, 707, 711, 714, 718, 722, 725, 729, 733, 737, 740, 744, 748, 752, 756, 760, 764, 768, 772, 777, 781, 785, 789, 793, 798, 802, 807, 811, 815, 820, 825, 829, 834, 839, 843, 848, 853, 858, 863, 868, 873, 878, 883, 888, 893, 898, 904, 909, 915, 920, 925, 931, 937, 942, 948, 954, 960, 966, 972, 978, 984, 990, 996, 1003, 1009, 1016, 1022, 1029, 1035, 1042, 1049, 1056, 1063, 1070, 1077, 1084, 1091, 1099, 1106, 1114, 1121, 1129, 1137, 1145, 1153, 1161, 1169, 1177, 1186, 1194, 1203, 1212, 1221, 1230, 1239, 1248, 1257, 1266, 1276, 1286, 1295, 1305, 1315, 1326, 1336, 1347, 1357, 1368, 1379, 1390, 1401, 1413, 1424, 1436, 1448, 1460, 1472, 1485, 1497, 1510, 1523, 1536, 1550, 1564, 1577, 1591, 1606, 1620, 1635, 1650, 1666, 1681, 1697, 1713, 1729, 1746, 1763, 1780, 1798, 1816, 1834, 1852, 1871, 1890, 1910, 1930, 1950, 1971, 1992, 2014, 2036, 2058, 2081, 2104, 2128, 2152, 2177, 2203, 2229, 2255, 2282, 2310, 2338, 2367, 2397, 2427, 2458, 2490, 2523, 2556, 2591, 2626, 2662, 2699, 2737, 2776, 2815, 2857, 2899, 2942, 2987, 3033, 3080, 3129, 3179, 3231, 3284, 3339, 3396, 3455, 3515, 3578, 3643, 3710, 3780, 3852, 3927, 4004, 4085, 4168, 4255, 4346, 4441, 4539, 4642, 4749, 4861, 4978, 5101, 5230, 5365, 5508, 5658, 5815, 5982, 6158, 6345, 6543, 6753, 6977, 7215, 7471, 7744, 8038, 8354, 8695, 9066, 9468, 9906, 10387, 10916, 11500, 12149, 12874, 13691, 14615, 15673, 16892, 18316, 19997, 22016, 24482, 27566, 31530, 36815, 44216, 55315, 73816, 110815, 221816]
# constant
#res_cores = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 155, 155]
while len(res_cores) < len(test_throughput_list):
	res_cores.append(float('inf'))
scatter_curve_plot(test_throughput_list, res_cores, '', '', '', 'r')
plt.figure(1)
'''

'''
N = [1,2,4,8,16]
func = [2, 2.2, 2.4, 3.2, 3.2]
funcN = [func[i]*N[i] for i in range(len(func))]
sigma = [0]
for i, num in enumerate(N):
	if num >= 2:
		curr = (2*num/func[i]-1)/(num-1)
		sigma.append(curr)
scatter_curve_plot(N, sigma, 'N (# of cores)', 'f(N) * N', 'f(N)*N ~ N', 'r')

plt.show()
'''




